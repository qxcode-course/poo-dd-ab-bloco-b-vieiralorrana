{
    "patches": [
        {
            "label": "2025-10-22_14-52-04",
            "content": "@@ -170,16 +170,17 @@\n __size =\n+=\n  size%0A%0A \n@@ -853,25 +853,26 @@\n lf.__grafite\n-:\n+ =\n  Grafite %7C N\n@@ -874,23 +874,16 @@\n e %7C None\n- = None\n %0A%0A    de\n@@ -936,21 +936,16 @@\n pessura%0A\n-    %0A\n     def \n@@ -1001,144 +1001,8 @@\n    %0A\n-    def temGrafite(self) -%3E bool:%0A        if self.__grafite != None:%0A            return True%0A        else:%0A            return False%0A    \n %0A   \n@@ -1029,23 +1029,19 @@\n rafite: \n-Grafite\n+str\n ) -%3E boo\n@@ -1200,23 +1200,20 @@\n ra() != \n-grafite\n+self\n .getThic\n@@ -1399,586 +1399,8 @@\n    %0A\n-    def remover(self) -%3E Grafite %7C None:%0A        aux = self.__grafite%0A        self.__grafite = None%0A        return aux%0A    %0A    def escever(self, grafite: Grafite):%0A        if self.__grafite == None:%0A            print(%22fail: nao existe grafite%22)%0A            return %0A        if grafite.getSize() %3C= 10:%0A            print(%22fail: tamanho insuficiente%22)%0A        %0A        uso = grafite.usagePerSheet()%0A        mm_usavel = grafite.getSize() - 10%0A        maxFolhas = mm_usavel // uso %0A%0A        if maxFolhas %3C= 0:%0A            print(%22fail: folha incompleta%22)%0A            return%0A        %0A\n     \n@@ -1556,17 +1556,16 @@\n rafite: \n-%5B\n %7Bgrafite\n@@ -1569,744 +1569,111 @@\n ite%7D\n-%5D\n %22%0A    %0A\n-%0Adef main():%0A    lapiseira = Lapiseira()%0A%0A    while True:%0A        line = input()%0A        print(%22$%22 + line)%0A        args = line.split(%22 %22)%0A%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22init%22:%0A            calibre = int(args%5B1%5D)%0A            lapiseira = Lapiseira(calibre)%0A        elif args%5B0%5D == %22show%22:%0A            print(lapiseira)%0A        elif args%5B0%5D == %22insert%22:%0A            calibre_g = int(args%5B1%5D)%0A            espessura = args%5B2%5D%0A            tam = int(args%5B3%5D) %0A            grafite = Grafite(calibre_g, espessura, tam)%0A            lapiseira.inserir(grafite)%0A        elif args%5B0%5D == %22remove%22:%0A            lapiseira.remover()%0A        elif args%5B0%5D == %22write%22:%0A            lapiseira.escever()%0A%0A%0Amain()%0A\n+grafite = Grafite(0.7, %22HB%22, 70)%0Alapiseira = Lapiseira(0.7)%0Alapiseira.inserir()%0Aprint(lapiseira)\n %0A   \n",
            "lines": "63"
        },
        {
            "label": "2025-10-22_16-42-49",
            "content": "@@ -2344,17 +2344,16 @@\n piseira(\n-0\n )%0A%0A    w\n",
            "lines": "115"
        },
        {
            "label": "2025-10-22_16-43-15",
            "content": "@@ -1254,17 +1254,17 @@\n %22fail: j\n-a\n+%C3%A1\n  existe \n@@ -2546,20 +2546,18 @@\n libre = \n-floa\n+in\n t(args%5B1\n@@ -2721,20 +2721,18 @@\n bre_g = \n-floa\n+in\n t(args%5B1\n@@ -3026,14 +3026,37 @@\n ever()%0A%0A\n+%0A\n main()\n+%0A%0A    %0A    %0A%0A        %0A\n",
            "lines": "115"
        },
        {
            "label": "2025-10-22_16-55-25",
            "content": "@@ -2169,17 +2169,16 @@\n ite = f%22\n-%5B\n %7Bself.__\n@@ -2185,17 +2185,16 @@\n grafite%7D\n-%5D\n %22 if sel\n@@ -2287,16 +2287,17 @@\n rafite: \n+%5B\n %7Bgrafite\n@@ -2297,16 +2297,17 @@\n grafite%7D\n+%5D\n %22%0A    %0A%0A\n",
            "lines": "109"
        },
        {
            "label": "2025-10-22_16-56-21",
            "content": "@@ -1688,27 +1688,45 @@\n escever(self\n+, grafite: Grafite\n ):%0A\n-\n         if s\n@@ -1821,31 +1821,24 @@\n %0A        if \n-self.__\n grafite.getS\n@@ -1921,23 +1921,16 @@\n   uso = \n-self.__\n grafite.\n@@ -1965,23 +1965,16 @@\n savel = \n-self.__\n grafite.\n",
            "lines": "109"
        },
        {
            "label": "2025-10-22_16-57-28",
            "content": "class Grafite:\n    def __init__(self, thickness: float, hardness: str, size: int):\n        self.__thickness = thickness\n        self.__hardness = hardness \n        self.__size = size\n\n    def getThickness(self):\n        return self.__thickness\n    \n    def getHardness(self):\n        return self.__hardness\n    \n    def getSize(self):\n        return self.__size \n    \n    def usagePerSheet(self):\n        if self.__hardness == \"HB\":\n            return 1\n        if self.__hardness == \"2B\":\n            return 2\n        if self.__hardness == \"4B\":\n            return 4\n        if self.__hardness == \"6B\":\n            return 6 \n    \n    def __str__(self):\n        return f\"{self.getThickness():.1f}:{self.getHardness()}:{self.getSize()}\"\n        \nclass Lapiseira:\n    def __init__(self, espessura: float):\n        self.__espessura = espessura\n        self.__grafite: Grafite | None = None\n\n    def getEspessura(self):\n        return self.__espessura\n    \n    def getGrafite(self):\n        return self.__grafite\n    \n    def temGrafite(self) -> bool:\n        if self.__grafite != None:\n            return True\n        else:\n            return False\n    \n    def inserir(self, grafite: Grafite) -> bool:\n        if self.__grafite != None:\n            print(\"fail: ja existe grafite\")\n            return False\n        else:\n            if self.getEspessura() != grafite.getThickness():\n                print(\"fail: calibre incompativel\")\n                return False\n            else:\n                self.__grafite = grafite \n                return True\n    \n    def remover(self) -> Grafite | None:\n        aux = self.__grafite\n        self.__grafite = None\n        return aux\n    \n    def escever(self):\n        if self.__grafite == None:\n            print(\"fail: nao existe grafite\")\n            return \n        if self.__grafite.getSize() <= 10:\n            print(\"fail: tamanho insuficiente\")\n        \n        uso = self.__grafite.usagePerSheet()\n        mm_usavel = self.__grafite.getSize() - 10\n        maxFolhas = mm_usavel // uso \n\n        if maxFolhas <= 0:\n            print(\"fail: folha incompleta\")\n            return\n        \n    def __str__(self):\n        grafite = f\"[{self.__grafite}]\" if self.__grafite != None else \"null\"\n        return f\"calibre: {self.getEspessura():.1f}, grafite: {grafite}\"\n    \n\ndef main():\n    lapiseira = Lapiseira(0)\n\n    while True:\n        line = input()\n        print(\"$\" + line)\n        args = line.split(\" \")\n\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"init\":\n            calibre = float(args[1])\n            lapiseira = Lapiseira(calibre)\n        elif args[0] == \"show\":\n            print(lapiseira)\n        elif args[0] == \"insert\":\n            calibre_g = float(args[1])\n            espessura = args[2]\n            tam = int(args[3]) \n            grafite = Grafite(calibre_g, espessura, tam)\n            lapiseira.inserir(grafite)\n        elif args[0] == \"remove\":\n            lapiseira.remover()\n        elif args[0] == \"write\":\n            lapiseira.escever()\n\nmain()",
            "lines": "109"
        }
    ]
}